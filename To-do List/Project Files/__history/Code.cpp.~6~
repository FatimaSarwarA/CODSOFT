//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "Code.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
Ttodolist *todolist;
int serialNumber = 1;
//---------------------------------------------------------------------------
__fastcall Ttodolist::Ttodolist(TComponent* Owner)
	: TForm(Owner)
{
}
//---------------------------------------------------------------------------
void __fastcall Ttodolist::AddTaskClick(TObject *Sender)  {
String taskText = TaskInput->Text.Trim();

	if (!taskText.IsEmpty()) {
		String taskWithSerial = IntToStr(serialNumber) + ". " + taskText;
		TasksList->Items->Add(taskWithSerial);
		TaskInput->Text = "";


		serialNumber++;
	}
}

//---------------------------------------------------------------------------
void __fastcall Ttodolist::Enter(TObject *Sender, System::WideChar &Key)
{
if (Key == 13) {
	String taskText = TaskInput->Text.Trim();

	if (!taskText.IsEmpty()) {
		String taskWithSerial = IntToStr(serialNumber) + ". " + taskText;
		TasksList->Items->Add(taskWithSerial);
		TaskInput->Text = "";


		serialNumber++;
	}
}
}
//---------------------------------------------------------------------------
void __fastcall Ttodolist::RemoveTaskClick(TObject *Sender)
{
int selectedIndex = TasksList->ItemIndex;

	if (selectedIndex >= 0) {
		TasksList->Items->Delete(selectedIndex);
    }
}
//---------------------------------------------------------------------------
void __fastcall Ttodolist::CompleteTaskClick(TObject *Sender)
{
int selectedIndex = TasksList->ItemIndex;

    if (selectedIndex >= 0) {
        // Get the text of the selected item
		String taskText = TasksList->Items->Strings[selectedIndex];

        // Check if the item is not already marked as complete
        if (taskText.Pos("[Complete]") != 1) {
            // Mark the item as complete by adding "[Complete]" to the beginning
            taskText = "[Complete] " + taskText;

            // Update the listbox with the marked item
            TasksList->Items->Strings[selectedIndex] = taskText;

            // Change the text color of the selected item to green
            TasksList->Canvas->Font->Color = clGreen;
            TasksList->Canvas->TextOut(TasksList->ItemRect(selectedIndex).Left, TasksList->ItemRect(selectedIndex).Top, taskText);

            // Restore the default text color
            TasksList->Canvas->Font->Color = clWindowText;
        }
    }
}
//---------------------------------------------------------------------------
